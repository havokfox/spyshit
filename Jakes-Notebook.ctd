<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list="7"/>
  <node name="JavaScript" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="106" is_bold="0" foreground="" ts_creation="1678456350" ts_lastsave="1678485937">
    <node name="Comments" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1678456695" ts_lastsave="1678456723">
      <rich_text>Commenting Code in </rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text>:

Using // will tell </rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> to ignore the remainder of the text on the current line.
Example: </rich_text>
      <rich_text foreground="#147affff0000">// This is an in-line comment.</rich_text>
      <rich_text>

You can make an multi-line comment in </rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> begining with /* and ending with */.
Example: </rich_text>
      <rich_text foreground="#147affff0000">/* This is a
					multi-line comment */</rich_text>
    </node>
    <node name="Variables" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1678456755" ts_lastsave="1678477466">
      <rich_text>Variables allow computers to store and manipulate data. They do this by using a “label” to point to the data rather than using the data itself.

We tell </rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> to create or declare a variable by putting the keyword var in front of it.

Example: </rich_text>
      <rich_text foreground="#147affff0000">var ourName;</rich_text>
      <rich_text>

In </rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> we end statements with semicolons. Variable names can be made up of numbers, letters, and $ or _ , but may not contain spaces, or start with a number.
You can store a value in a variable with the assignment operator (=).

Example: </rich_text>
      <rich_text foreground="#147affff0000">myVariable = 5;</rich_text>
      <rich_text>

If there any calculations to the right of the = operator, those are performed before the value is assigned to the variable on the left of the operator.

Example: </rich_text>
      <rich_text foreground="#147affff0000">var myVar;
				myVar = 5;</rich_text>
      <rich_text>

After a value is assigned to a variable using the assignment operator, you can assign the value of that variable to another variable using the assignment operator.

Example: </rich_text>
      <rich_text foreground="#147affff0000">var myVar;
				myVar = 5;
				var myNum;
				myNum = myVar;</rich_text>
      <rich_text>
								
It is common to initialize a variable to an initial value in the same line as it is declared.

Example: </rich_text>
      <rich_text foreground="#147affff0000">var myVar = 0;</rich_text>
      <rich_text>

You can also declare a string variable. This is a string literal, a string literal, or string, is a series of zero or more characters enclosed in single or double quotes.

Example: </rich_text>
      <rich_text foreground="#147affff0000">var myName = “your name”;				</rich_text>
      <rich_text>

When </rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> variables are declared, they have an initial value of undefined. If you do a mathematical operation on an undefined variable your result will be </rich_text>
      <rich_text foreground="#147affff0000">NAN</rich_text>
      <rich_text> which means </rich_text>
      <rich_text foreground="#147affff0000">“Not a Number”.</rich_text>
      <rich_text> If you concatenate a string with an undefined variable, you will get a string of undefined.

In </rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> all variables and function names are case sensitive. This means that Capitalization matters.
Example: MYVAR is not the same as myVar nor myvar.

The best practice in </rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> is camelCase. In camelCase, multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized.

Example: </rich_text>
      <rich_text foreground="#147affff0000">var someVariable;
				var anotherVariableName;
				var thisVariableNameIsSoLong;</rich_text>
      <rich_text>

One of the biggest problems with declaring variables with the var keyword is that you can easily overwrite variable declartions. In larger applications this can cause issues by accidentally overwriting variables you didn't intend to searching and finding errors can become difficult because overwriting a variable won't throw an error.

The keyword called </rich_text>
      <rich_text foreground="#147affff0000">let </rich_text>
      <rich_text>was introduced in </rich_text>
      <rich_text foreground="#147affff0000">ES6,</rich_text>
      <rich_text> a marjor update to </rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text>, tro solve this potential issue with the var keyword.

If you replace var with let it will result in an error so you don't accidentally don't overwrite variables.

Example: </rich_text>
      <rich_text foreground="#147affff0000">let camper  = “James";
			   let camper = “David”;</rich_text>
      <rich_text>
So unlike var, when you use let, a variable with the same name can only be declared once.

In </rich_text>
      <rich_text foreground="#147affff0000">ES6</rich_text>
      <rich_text> you can also declare variables using the </rich_text>
      <rich_text foreground="#147affff0000">const</rich_text>
      <rich_text> keyword.		
</rich_text>
      <rich_text foreground="#147affff0000">Const</rich_text>
      <rich_text> has all of the awesome features let has, with the added bonus that variables declared with const are </rich_text>
      <rich_text foreground="#147affff0000">read-only</rich_text>
      <rich_text>. They are a constant value, which means once a variable is assigned with const, it cannot be reassigned.
	
Example:  const FAV_PET = “Cats”;
				FAV_PET = “Dogs”;

The console will display an error due to reassigning the value of FAV_PET.

You should always name variables you don't want to reassign using the const keyword. This helps when you attempt to reassign a variable that is meant to stay constant.

Note: it is common for developers to use uppercase variable identifiers for immutable values and lowercase or camelCase for mutable values (objects and arrays).				
				</rich_text>
      <node name="Escaping Literal Quotes in Strings" unique_id="7" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1678472353" ts_lastsave="1678477224">
        <rich_text>When you are defining a string you must start and end with a single or double quote. What happens when you need a literal quote " or ' inside of your string?

In </rich_text>
        <rich_text link="node 2">JavaScript</rich_text>
        <rich_text> you can escape a quote from considering it as an end of string quote by placing a backslash (\) in front of the quote.

Example: 

</rich_text>
        <rich_text foreground="#147affff0000">const sampleStr = “Alan said, \”Peter is learning JavaScript\".";</rich_text>
        <rich_text>

This signals to </rich_text>
        <rich_text link="node 2">JavaScript</rich_text>
        <rich_text> that the following quote is not the end of the string, but should instead appear inside the string. So if you were to print this to the console, you would get:

Alan said, “Peter is learning JavaScript”.

String values in </rich_text>
        <rich_text link="node 2">JavaScript</rich_text>
        <rich_text> may be written with single or double quotes, as long as you start and end with the same type of quote. 

Example: 
</rich_text>
        <rich_text foreground="#147affff0000">const doubleQuoteStr = “This is a string”;
const singleQuoteSTr = “This is also a string”;</rich_text>
        <rich_text>

The reason you why you might want to use one type of quote over the other is if you want to use both in a string. This might happen if you want tro save a conversation in a string and have the conversation in quotes. Another use for it would be saving an &lt;a&gt; tag with various attributes in quotes, all within a string.

Example: 
</rich_text>
        <rich_text foreground="#147affff0000">const conversation = ‘Fin exclaims to Jake, “Algebraic!”’;</rich_text>
        <rich_text>

However this becomes a problem if you ned to use the outermost quotes within it. Remember, a string has the same kind of quote at the beginning and end. But if you have that same quote somwehre in the middle, the string will stop early and throw an error.

Example: 
</rich_text>
        <rich_text foreground="#147affff0000">const goodStr = ‘Jake asks Finn, “Hey, let\’s go on an adventure?”';
const badstr = ‘Finn responds, “Let’s go!”';</rich_text>
        <rich_text>

Here badStr will throw an error.

Quotes are not the only characters that can be escaped inside a string. Escape sequences allow you to use characters you may not otherwise be able to use in a string.

</rich_text>
        <rich_text background="#24241f1f3131" weight="heavy">Code			Output		</rich_text>
        <rich_text background="#24241f1f3131">
\' 				single quote		
\"				double quote	
\\				backslash			
\n				newline				
\t				tab					
\r				carriage return	
\b				word boundry	
\f				form feed			</rich_text>
        <rich_text>
Note: The backslash itself must be escaped in order to display as a backslash.</rich_text>
      </node>
      <node name="Concatenating Strings with Plus Operator" unique_id="8" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1678477466" ts_lastsave="1678484656">
        <rich_text>In </rich_text>
        <rich_text link="node 2">JavaScript</rich_text>
        <rich_text>, when the + orderator is used with a String value, it is called the concatenation operator. You can build a new string out of other strings by concatenating them together.

Example:

</rich_text>
        <rich_text foreground="#147affff0000">‘My name is Alan,' + ‘ I concatenate.’</rich_text>
        <rich_text>

Note: Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.

Example: 

</rich_text>
        <rich_text foreground="#147affff0000">const ourStr = “I come first. ” + “I come second.”;</rich_text>
        <rich_text>

We can also use the </rich_text>
        <rich_text foreground="#147affff0000">+=</rich_text>
        <rich_text> operator to concatenate a string onto the end of an existing string variable. This can be very helpful to break a long string over severeal lines.

Note: Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.

Example:

</rich_text>
        <rich_text foreground="#147affff0000">let ourStr = “I come first. ”;
ourStr += “I come second.”;</rich_text>
        <rich_text>

ourStr now has a value of the string I come first. I come second.

Sometimes you will need to build a string. By using the concatenation operator </rich_text>
        <rich_text foreground="#147affff0000">(+)</rich_text>
        <rich_text>, you can insert one or more variables into a string you're building.

Example:

</rich_text>
        <rich_text foreground="#147affff0000">const ourName = “freeCodeCamp”;
const ourStr =  “Hello, our name is ” + ourName + “, how are you?”;</rich_text>
        <rich_text>

ourStr would have a value of the string Hello, our name is freeCodeCamp, how are you?.

Just as we can build a string over multiple lines of string literals, we can also append variables to a string using the plus equals </rich_text>
        <rich_text foreground="#147affff0000">(+=)</rich_text>
        <rich_text> operator.

Example: 

</rich_text>
        <rich_text foreground="#147affff0000">const anAdjective = “awesome!”;
let ourStr = “freeCodeCamp is ”;
ourStr += anAdjective;</rich_text>
        <rich_text>


</rich_text>
      </node>
    </node>
    <node name="Math Operators" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1678460939" ts_lastsave="1678484616">
      <rich_text foreground="#147affff0000">Number</rich_text>
      <rich_text> is a data type in </rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> which represent numeric data.

</rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> uses the </rich_text>
      <rich_text foreground="#147affff0000">+</rich_text>
      <rich_text> symbol as an addition operator when placed between two numbers.

Example: </rich_text>
      <rich_text foreground="#147affff0000">const myVar = 5 + 10;</rich_text>
      <rich_text>

</rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> uses the </rich_text>
      <rich_text foreground="#147affff0000">-</rich_text>
      <rich_text> symbol for subtraction.

Example: </rich_text>
      <rich_text foreground="#147affff0000">const</rich_text>
      <rich_text> </rich_text>
      <rich_text foreground="#147affff0000">myVar = 12 - 6;</rich_text>
      <rich_text>

</rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> uses the </rich_text>
      <rich_text foreground="#147affff0000">*</rich_text>
      <rich_text> symbol for multiplication of two numbers.

Example: </rich_text>
      <rich_text foreground="#147affff0000">const myVar = 13 * 13;</rich_text>
      <rich_text>

</rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> uses the </rich_text>
      <rich_text foreground="#147affff0000">/</rich_text>
      <rich_text> for division.

Example: </rich_text>
      <rich_text foreground="#147affff0000">const myVar = 16 / 2;</rich_text>
      <rich_text>

You can easily i</rich_text>
      <rich_text foreground="#147affff0000">ncrement or add </rich_text>
      <rich_text>one to a variable using the </rich_text>
      <rich_text foreground="#147affff0000">++</rich_text>
      <rich_text> operator.

</rich_text>
      <rich_text foreground="#147affff0000">i++;</rich_text>
      <rich_text>

is the equivalent of 

</rich_text>
      <rich_text foreground="#147affff0000">i = i + 1;</rich_text>
      <rich_text>

Which eliminates the need for the equal sign.

You can easily </rich_text>
      <rich_text foreground="#147affff0000">decrement or decrease</rich_text>
      <rich_text> a variable by one with the </rich_text>
      <rich_text foreground="#147affff0000">-- </rich_text>
      <rich_text>operator.

</rich_text>
      <rich_text foreground="#147affff0000">i--;</rich_text>
      <rich_text>

is the equivalent of 

</rich_text>
      <rich_text foreground="#147affff0000">i = i - 1;</rich_text>
      <rich_text>

Which eliminates the need for the equal sign.

We can store decimal numbers in variables too. </rich_text>
      <rich_text foreground="#147affff0000">Decimal numbers</rich_text>
      <rich_text> are sometimes reffered to as </rich_text>
      <rich_text foreground="#147affff0000">floating point numbers</rich_text>
      <rich_text> or </rich_text>
      <rich_text foreground="#147affff0000">floats.</rich_text>
      <rich_text>

Note: When you compute numbers, they are computed with finite precision. Operations using floating points may lead to different results than the desired outcome.

In </rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> you can also perform calculations with decimal numbers, just like whole numbers.

Example: </rich_text>
      <rich_text foreground="#147affff0000">const product = 2.0 * 2.5;</rich_text>
      <rich_text>

You can also divide one decimal by another

Example: </rich_text>
      <rich_text foreground="#147affff0000">const quotient = 4.4 / 2.0;</rich_text>
      <rich_text>




</rich_text>
      <node name="Compound Assignment" unique_id="6" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1678462620" ts_lastsave="1678463088">
        <rich_text>In programming, it is common to use assignments to modify the contents of a variable. </rich_text>
        <rich_text foreground="#147affff0000">Remember</rich_text>
        <rich_text> that everything to the right of the equals sign is evaluated first.

Example: </rich_text>
        <rich_text foreground="#147affff0000">myVar = myVar + 5;</rich_text>
        <rich_text>

Since this is such a common pattern, there are operators which do both a mathematical operation and asssignment in one step.

One such operator is the </rich_text>
        <rich_text foreground="#147affff0000">+= </rich_text>
        <rich_text>operator.

Example: 
</rich_text>
        <rich_text foreground="#147affff0000">let myVar = 1;
myVar += 5;
console.log(myVar);</rich_text>
        <rich_text>

6 would bew displayed in the console.

Like the </rich_text>
        <rich_text foreground="#147affff0000">+=</rich_text>
        <rich_text> operator, </rich_text>
        <rich_text foreground="#147affff0000">-= </rich_text>
        <rich_text>subtracts a number from a variable.

</rich_text>
        <rich_text foreground="#147affff0000">myVar = myVar - 5;</rich_text>
        <rich_text>

This can be rewritten as:

</rich_text>
        <rich_text foreground="#147affff0000">myVar -= 5;</rich_text>
        <rich_text>

The </rich_text>
        <rich_text foreground="#147affff0000">*=</rich_text>
        <rich_text> operator multiplies a variable by a number.

</rich_text>
        <rich_text foreground="#147affff0000">myVar = myVar * 5; </rich_text>
        <rich_text>

Can be rewritten as 

</rich_text>
        <rich_text foreground="#147affff0000">myVar *= 5</rich_text>
        <rich_text>;

The /= operator divides a variable by another </rich_text>
      </node>
      <node name="Remainder Operator" unique_id="11" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1678484599" ts_lastsave="1678484600">
        <rich_text>The remainder operator </rich_text>
        <rich_text foreground="#147affff0000">%</rich_text>
        <rich_text> gives the remainder of the divison of two numbers.

Example: 

5 % 2 = 1
5 / 2 = 2 remainder 1
2 * 2 = 4 
5 - 4 = 1

Usage: In mathematics, a number can abe checked to be even or odd by checking the remainder of the divison of the number by 2. Even numbers have a remainder of 0, while odd numbers have a remainder of 1.

Example: 

17 % 2 = 1
48 % 2 = 0

Note: The remainder operator is sometimes incorrectly referred to as the modulus operator. It is very similiar to modulus, but does not work with negative numbers.
</rich_text>
      </node>
    </node>
    <node name="Arrays" unique_id="13" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1678485937" ts_lastsave="1678487052">
      <rich_text>WIth </rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> </rich_text>
      <rich_text foreground="#147affff0000">array</rich_text>
      <rich_text> variables, we can store serveral pieces of data in one place.

You start an array declaration with an opening square bracket, and end it with a closing square bracket, and put a comma between each entry like this.

</rich_text>
      <rich_text foreground="#147affff0000">const sandwich = ["peanut butter", “jelly”, “bread"];
</rich_text>
      <rich_text>
You can also nest arrays within other arrays, like below:

</rich_text>
      <rich_text foreground="#147affff0000">const teams = [["Bulls", 23], ["White Sox", 45j]];</rich_text>
      <rich_text>

This is called a multi-dimensional array.

We can access the data inside arrays using indexes. 

Array indexes are written in the same bracket notation that strings use, except that instead of specifying a character, they are specifying an entry in the array. Like strings, arrays use zero-based indexing, so the first element in an array has an index of 0.

Example:

</rich_text>
      <rich_text foreground="#147affff0000">const array = [50, 60, 70]
console.log(array[0]);
const data = array[1];</rich_text>
      <rich_text>

The </rich_text>
      <rich_text foreground="#147affff0000">console.log(array[0])</rich_text>
      <rich_text> prints 50, and data has a value of 60.

Unlike strings, the entries of arrays are mutable and can be changed freely, even if the array was declared with const.

</rich_text>
      <rich_text foreground="#147affff0000">const ourArray = [50, 40, 30];
ourArray[0] = 15;</rich_text>
      <rich_text>

</rich_text>
      <rich_text foreground="#147affff0000">ourArray</rich_text>
      <rich_text> now has the value </rich_text>
      <rich_text foreground="#147affff0000">[15, 40, 30]</rich_text>
      <rich_text>

Note: There shouldn't be any spaces between the array name and the square brackets, like array[0]. Although </rich_text>
      <rich_text link="node 2">JavaScript</rich_text>
      <rich_text> is able tgo process this correctly, this may confuse other programmers reading your code.
</rich_text>
    </node>
  </node>
  <node name="Strings" unique_id="9" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1678484519" ts_lastsave="1678485005">
    <rich_text>In </rich_text>
    <rich_text link="node 2">JavaScript</rich_text>
    <rich_text>, String values are immutable, which means they cannot be altered once created.

For example, the following code will produce an error because the letter B in the string Bob cannot be changed to the letter J:

</rich_text>
    <rich_text foreground="#147affff0000">let myStr = “Bob”;
myStr[0] = “J”;</rich_text>
    <rich_text>

Note that this does not mean that myStr could not be re-assigned. The only way to change myStr would to be to assign it with a new value like this:

</rich_text>
    <rich_text foreground="#147affff0000">let myStr = “Bob”;
myStr = “Job";</rich_text>
    <rich_text>
</rich_text>
    <node name="Bracket Notation" unique_id="10" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1678484574" ts_lastsave="1678485573">
      <rich_text>Bracket notation is a way to get a character iat a specific index within a string.

Most modern programming languages, like JavaScrip, don't start counting at 1 like humans do. They start at 0. This is reffered to as Zero-based indexing.

For example, the character at index 0 of the word Charles is C. So if const firstName = “Charles” , you can get the value of the first letter of the string by using firstName[0].

Example: 
</rich_text>
      <rich_text foreground="#147affff0000">
const firstName ="Charles";
const firstLetter = firstName[0];
</rich_text>
      <rich_text>
firstLetter would have a value of the string C.

You can also use bracket notation to get the character at other postitions within a string.

Remember that computers start counting at 0, so the first character is actually the zeroth character.

</rich_text>
      <rich_text foreground="#147affff0000">const firstName = “Ada”;
const secondLetterOfFirstName = firstName[1];</rich_text>
      <rich_text>

</rich_text>
      <rich_text foreground="#147affff0000">secondLetterOfFirstName</rich_text>
      <rich_text> would have a value of the string d.

In order to get the last letter of a string, you can subtract one from the string's length.

For example, if const firstName = “Ada”, you can get the value of the last letter of the string by using firstName[firstName.length -1].

Example: 
</rich_text>
      <rich_text foreground="#147affff0000">const firstName = “Ada”;
const lastLetter = firstName[firstName.length - 1];</rich_text>
      <rich_text>

lastLetter would have a value of the string a.

You can use the same principle we just used to retrieve the last character in a string to retrive the Nth-to-last character.

For example, you can get the value of the third-to-last letter of the const firstName = “Augusta” string by using firstName[firstName.length -3]

Example:

</rich_text>
      <rich_text foreground="#147affff0000">const firstName = “Augusta”;
const thirdToLastLetter = firstName[firstName.length -3];
</rich_text>
      <rich_text>
thirdToLastLetter would have a value of the string s.
</rich_text>
    </node>
    <node name=".length method" unique_id="12" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1678484665" ts_lastsave="1678484666">
      <rich_text>You can find the length of String value by writing .length after the string variable or string literal.

</rich_text>
      <rich_text foreground="#147affff0000">console.log("Alan Peter".length);</rich_text>
      <rich_text>

The value 10 would be displayed in the console. Note that the space character between “Alan” and “Peter” is also counted.

For example, if we created a variable </rich_text>
      <rich_text foreground="#147affff0000">const firstName ="Ada"</rich_text>
      <rich_text> we could find out how long Ada is by using the </rich_text>
      <rich_text foreground="#147affff0000">firstName.length</rich_text>
      <rich_text> property.
</rich_text>
    </node>
  </node>
</cherrytree>
